#!/bin/sh
# Copyright (C) 2021 Hisilicon (Shanghai) Technologies Co., Ltd. All rights reserved.

# Usage: ./load3516dv300 [ -r|-i|-a ] [ sensor0~1 ]
#         -r : rmmod all modules
#         -i : insmod all modules
#         -a : rmmod all modules and then insmod them
# e.g: RAW:        ./load3516dv300 -i -sensor0 imx335 -sensor1 imx335
# e.g: BT1120/DC : ./load3516dv300 -i -sensor0 imx327 -sensor1 imx327 -osmem 128 -yuv0 1
# e.g: BT656     : ./load3516dv300 -i -sensor0 imx327 -sensor1 imx327 -osmem 128 -yuv0 2

####################Variables Definition##########################

SNS_TYPE0=imx335;           # sensor type
SNS_TYPE1=NULL;            	# sensor type
YUV_TYPE0=0;                # 0 -- raw, 1 -- bt1120/DC, 2 --bt656
CHIP_TYPE=hi3516dv300;      # chip type
#DDR start:0x80000000,   kernel start:0x80000000,  OS(128M); MMZ start:0x88000000
mem_total=512                # 512M, total mem
mem_start=0x80000000          # phy mem start
os_mem_size=128               # 128M, os mem
mmz_start=0x88000000;         # mmz start addr
mmz_size=384M;               # 384M, mmz size
##################################################################

report_error()
{
    echo "******* Error: There's something wrong, please check! *****"
    exit 1
}

insert_isp()
{
    insmod hi3516cv500_isp.ko
}


insert_ko()
{
    # driver load
    #insmod hi_osal.ko anony=1 mmz_allocator=hisi mmz=anonymous,0,$mmz_start,$mmz_size || report_error
    insmod hi_osal.ko anony=1 mmz_allocator=hisi mmz=anonymous,0,0xA8000000,384M
    insmod hi_irq.ko
    insmod hi_proc.ko

    # sys config
    insmod sys_config.ko chip=$CHIP_TYPE sensors=sns0=$SNS_TYPE0,sns1=$SNS_TYPE1, g_cmos_yuv_flag=$YUV_TYPE0
    insmod hi3516cv500_base.ko
    insmod hi3516cv500_sys.ko
    insmod hi3516cv500_tde.ko
    insmod hi3516cv500_vo_dev.ko
    insmod hifb.ko video="hifb:vram0_size:16200"     # default fb0:1080p
    insmod hi3516cv500_hdmi.ko

    insmod hi_mipi_rx.ko
}

remove_ko()
{
    rmmod hi_mipi_rx
    rmmod hifb
    rmmod hi3516cv500_vo_dev.ko
    rmmod hi3516cv500_tde
    rmmod hi3516cv500_hdmi
    rmmod hi3516cv500_sys
    rmmod hi3516cv500_base
    rmmod sys_config

    rmmod hi_irq.ko
    rmmod hi_proc.ko
    rmmod hi_osal
    rmmod hi_securec.ko
}

sys_restore()
{
    ####################################################
    clkcfg_hi3516cv500.sh > /dev/null

    # system configuration
    sysctl_hi3516cv500.sh  # > /dev/null
    sns_config;
}

load_usage()
{
    echo "Usage:  ./load3516dv300 [-option] [sensor0~1]"
    echo "options:"
    echo "    -i                       insert modules"
    echo "    -r                       remove modules"
    echo "    -a                       remove modules first, then insert modules"
    echo "    -sensor sensor_name      config sensor type [default: imx335]"
    echo "    -total mem_size          config total mem size [unit: M, default: 512]"
    echo "    -osmem os_mem_size       config os mem size [unit: M, default: 128]"
    echo "    -h                       help information"
    echo -e "Available sensors: imx327 imx335 os05a imx307"
    echo -e "for example: ./load3516dv300 -i -sensor0 imx335 -sensor1 imx335\n"
}

calc_mmz_info()
{
    mmz_start=`echo "$mem_start $os_mem_size"  |
    awk 'BEGIN { temp = 0; }
    {
        temp = $1/1024/1024 + $2;
    }
    END { printf("0x%x00000\n", temp); }'`

    mmz_size=`echo "$mem_total $os_mem_size"  |
    awk 'BEGIN { temp = 0; }
    {
        temp = $1 - $2;
    }
    END { printf("%dM\n", temp); }'`
    echo "mmz_start: $mmz_start, mmz_size: $mmz_size"
}

######################parse arg###################################
b_arg_sensor0=0
b_arg_sensor1=0
b_arg_yuv_type0=0
b_arg_insmod=0
b_arg_remove=0
b_arg_restore=0
b_arg_total_mem=0
b_arg_os_mem=0

for arg in $@
do
    if [ $b_arg_sensor0 -eq 1 ] ; then
        b_arg_sensor0=0;
        SNS_TYPE0=$arg;
    fi
    if [ $b_arg_sensor1 -eq 1 ] ; then
        b_arg_sensor1=0;
        SNS_TYPE1=$arg;
    fi
    if [ $b_arg_total_mem -eq 1 ]; then
        b_arg_total_mem=0;
        mem_total=$arg;

        if [ -z $mem_total ]; then
            echo "[error] mem_total is null"
            exit;
        fi
    fi

    if [ $b_arg_os_mem -eq 1 ] ; then
        b_arg_os_mem=0;
        os_mem_size=$arg;

        if [ -z $os_mem_size ]; then
            echo "[error] os_mem_size is null"
            exit;
        fi
    fi

    if [ $b_arg_yuv_type0 -eq 1 ] ; then
        b_arg_yuv_type0=0;
        YUV_TYPE0=$arg;
    fi

    case $arg in
        "-i")
            b_arg_insmod=1;
            ;;
        "-r")
            b_arg_remove=1;
            ;;
        "-a")
            b_arg_insmod=1;
            b_arg_remove=1;
            ;;
        "-h")
            load_usage;
            ;;
        "-sensor0")
            b_arg_sensor0=1;
            ;;
        "-sensor")
            b_arg_sensor0=1;
            ;;
        "-sensor1")
            b_arg_sensor1=1;
            ;;
        "-osmem")
            b_arg_os_mem=1;
            ;;
        "-yuv0")
            b_arg_yuv_type0=1;
            ;;
        "-total")
            b_arg_total_mem=1;
            ;;
        "-restore")
            b_arg_restore=1;
            ;;
    esac
done
#######################parse arg end########################
if [ $os_mem_size -ge $mem_total ] ; then
    echo "[err] os_mem[$os_mem_size], over total_mem[$mem_total]"
    exit;
fi

calc_mmz_info;

#######################Action###############################

if [ $# -lt 1 ]; then
    load_usage;
    exit 0;
fi


if [ $b_arg_remove -eq 1 ]; then
    remove_ko;
fi

if [ $b_arg_insmod -eq 1 ]; then
    insert_ko;
fi

if [ $b_arg_restore -eq 1 ]; then
    sys_restore;
fi

